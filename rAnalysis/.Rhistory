geom_point(color = "black", size = 3) +
geom_point(data = bestStr, aes(x = K, y = Mean.LnP.K.), color = "red", size = 3,  shape = 21) +
geom_errorbar(aes(ymin = Mean.LnP.K. - Stdev.LnP.K.,
ymax = Mean.LnP.K. + Stdev.LnP.K.), width = 0.1) +
scale_x_continuous(breaks = seq(0,12, by = 2)) +
labs(y = "Mean Ln(probability)") +
theme_bw()
logKPlot = logKPlotA + theme(
axis.title.x = element_blank(),
axis.title.y = element_text(size = 14, color = "black"),
axis.text= element_text(size = 12, color = "black"),
axis.line = element_blank(),
panel.border = element_rect(size = 1)
)
logKPlot
# log probability of K plot
logKPlotA = ggplot(strctrHrvstr, aes(x = K, y = Mean.LnP.K.)) +
geom_point(color = "black", size = 3) +
geom_point(data = bestStr, aes(x = K, y = Mean.LnP.K.), fill = "red", size = 3,  shape = 21) +
geom_errorbar(aes(ymin = Mean.LnP.K. - Stdev.LnP.K.,
ymax = Mean.LnP.K. + Stdev.LnP.K.), width = 0.1) +
scale_x_continuous(breaks = seq(0,12, by = 2)) +
labs(y = "Mean Ln(probability)") +
theme_bw()
logKPlot = logKPlotA + theme(
axis.title.x = element_blank(),
axis.title.y = element_text(size = 14, color = "black"),
axis.text= element_text(size = 12, color = "black"),
axis.line = element_blank(),
panel.border = element_rect(size = 1)
)
logKPlot
# deltaK plot
bestDK = strctrHrvstr[2,]
deltaKPlotA = ggplot(strctrHrvstr, aes(x = K, y = Delta.K), color = "black") +
geom_path(size = 1, aes(x = K)) +
geom_point(size = 3) +
geom_point(data = bestDK, aes(x = K, y = DeltaK.), fill = "red", size = 3,  shape = 21) +
scale_x_continuous(breaks = seq(0,12, by = 2)) +
labs(y = expression(paste(Delta, italic("K")))) +
theme_bw()
deltaKPlot = deltaKPlotA + theme(
axis.title.x = element_blank(),
axis.title.y = element_text(size = 14, color = "black"),
axis.text= element_text(size = 12, color = "black"),
axis.line = element_blank(),
panel.border = element_rect(size = 1)
)
deltaKPlot
deltaKPlotA = ggplot(strctrHrvstr, aes(x = K, y = Delta.K), color = "black") +
geom_path(size = 1, aes(x = K)) +
geom_point(size = 3) +
geom_point(data = bestDK, aes(x = K, y = Delta.K.), fill = "red", size = 3,  shape = 21) +
scale_x_continuous(breaks = seq(0,12, by = 2)) +
labs(y = expression(paste(Delta, italic("K")))) +
theme_bw()
deltaKPlot = deltaKPlotA + theme(
axis.title.x = element_blank(),
axis.title.y = element_text(size = 14, color = "black"),
axis.text= element_text(size = 12, color = "black"),
axis.line = element_blank(),
panel.border = element_rect(size = 1)
)
deltaKPlot
bestDK
deltaKPlotA = ggplot(strctrHrvstr, aes(x = K, y = Delta.K), color = "black") +
geom_path(size = 1, aes(x = K)) +
geom_point(size = 3) +
geom_point(data = bestDK, aes(x = K, y = Delta.K), fill = "red", size = 3,  shape = 21) +
scale_x_continuous(breaks = seq(0,12, by = 2)) +
labs(y = expression(paste(Delta, italic("K")))) +
theme_bw()
deltaKPlot = deltaKPlotA + theme(
axis.title.x = element_blank(),
axis.title.y = element_text(size = 14, color = "black"),
axis.text= element_text(size = 12, color = "black"),
axis.line = element_blank(),
panel.border = element_rect(size = 1)
)
deltaKPlot
head(snpBIC)
bestBIC = snpBIC[2,]
bicPlotA = ggplot(snpBIC, aes(x = Number.of.Clusters..K., y = BIC), color = "black") +
geom_point(size = 3) +
geom_path(size = 1) +
geom_point(data = bestBIC, aes(x = Number.of.Clusters..K., y = BIC), fill = "red", size = 3,  shape = 21) +
scale_x_continuous(breaks = seq(0,12, by = 2)) +
labs(y = "BIC") +
theme_bw()
bicPlot = bicPlotA + theme(
axis.title.x = element_blank(),
axis.title.y = element_text(size = 14, color = "black"),
axis.text= element_text(size = 12, color = "black"),
axis.line = element_blank(),
panel.border = element_rect(size = 1)
)
bicPlot
bestCV = cvAdmix[1,]
cvAdmix
cvPlotA = ggplot(cvAdmix, aes(x = Number.of.clusters, y = Model.Cross.Validation.Values), color = "black") +
geom_point(size = 3) +
geom_path(size = 1) +
geom_point(data = bestCV, aes(x = Number.of.clusters, y = Model.Cross.Validation.Values), fill = "red", size = 3,  shape = 21) +
scale_x_continuous(breaks = seq(0,12, by = 2)) +
labs(y = "Model cross validation") +
theme_bw()
cvPlot = cvPlotA + theme(
axis.title.x = element_blank(),
axis.title.y = element_text(size = 14, color = "black"),
axis.text= element_text(size = 12, color = "black"),
axis.line = element_blank(),
panel.border = element_rect(size = 1)
)
cvPlot
evannoPlots = (logKPlot | deltaKPlot)/(bicPlot|cvPlot) +
plot_layout(widths = c(20,1,20)) +
plot_annotation(caption = expression(paste("Genetic clusters (",italic(K),")")),
theme = theme(plot.caption = element_text(size = 14, hjust = 0.5))) +
plot_annotation(tag_level = "a") &
theme(plot.tag = element_text(size = 16, face = "bold"))
evannoPlots
modelKPlots = (logKPlot | deltaKPlot)/(bicPlot|cvPlot) +
plot_layout(widths = c(20,1,20)) +
plot_annotation(caption = expression(paste("Genetic clusters (",italic(K),")")),
theme = theme(plot.caption = element_text(size = 14, hjust = 0.5))) +
plot_annotation(tag_level = "a") &
theme(plot.tag = element_text(size = 16, face = "bold"))
modelKPlots
ggsave("modelKPlots.tiff", width = 20, height = 20, units = "cm", dpi = 300)
ggsave("modelKPlots.tiff", width = 15, height = 12, units = "cm", dpi = 300)
ggsave("modelKPlots.tiff", width = 15, height = 14, units = "cm", dpi = 300)
# log probability of K plot
logKPlotA = ggplot(strctrHrvstr, aes(x = K, y = Mean.LnP.K.)) +
geom_point(color = "black", size = 3) +
geom_point(data = bestStr, aes(x = K, y = Mean.LnP.K.), fill = "red", size = 3,  shape = 21) +
geom_errorbar(aes(ymin = Mean.LnP.K. - Stdev.LnP.K.,
ymax = Mean.LnP.K. + Stdev.LnP.K.), width = 0.4) +
scale_x_continuous(breaks = seq(0,12, by = 2)) +
labs(y = "Mean Ln(probability)") +
theme_bw()
logKPlot = logKPlotA + theme(
axis.title.x = element_blank(),
axis.title.y = element_text(size = 14, color = "black"),
axis.text= element_text(size = 12, color = "black"),
axis.line = element_blank(),
panel.border = element_rect(size = 1)
)
# group plots
modelKPlots = (logKPlot | deltaKPlot)/(bicPlot|cvPlot) +
plot_layout(widths = c(20,1,20)) +
plot_annotation(caption = expression(paste("Genetic clusters (",italic(K),")")),
theme = theme(plot.caption = element_text(size = 14, hjust = 0.5))) +
plot_annotation(tag_level = "a") &
theme(plot.tag = element_text(size = 16, face = "bold"))
modelKPlots
ggsave("modelKPlots.tiff", width = 17, height = 16, units = "cm", dpi = 300)
# log probability of K plot
logKPlotA = ggplot(strctrHrvstr, aes(x = K, y = Mean.LnP.K.)) +
geom_point(color = "black", size = 3) +
geom_point(data = bestStr, aes(x = K, y = Mean.LnP.K.), fill = "red", size = 3,  shape = 21) +
geom_errorbar(aes(ymin = Mean.LnP.K. - Stdev.LnP.K.,
ymax = Mean.LnP.K. + Stdev.LnP.K.), width = 0.6) +
scale_x_continuous(breaks = seq(0,12, by = 2)) +
labs(y = "Mean Ln(probability)") +
theme_bw()
logKPlot = logKPlotA + theme(
axis.title.x = element_blank(),
axis.title.y = element_text(size = 14, color = "black"),
axis.text= element_text(size = 12, color = "black"),
axis.line = element_blank(),
panel.border = element_rect(size = 1)
)
# group plots
modelKPlots = (logKPlot | deltaKPlot)/(bicPlot|cvPlot) +
plot_layout(widths = c(20,1,20)) +
plot_annotation(caption = expression(paste("Genetic clusters (",italic(K),")")),
theme = theme(plot.caption = element_text(size = 14, hjust = 0.5))) +
plot_annotation(tag_level = "a") &
theme(plot.tag = element_text(size = 16, face = "bold"))
modelKPlots
ggsave("modelKPlots.tiff", width = 17, height = 16, units = "cm", dpi = 300)
head(strctrHrvstr)
# log probability of K plot
logKPlotA = ggplot(strctrHrvstr, aes(x = K, y = Mean.LnP.K.)) +
geom_point(color = "black", size = 3) +
geom_point(data = bestStr, aes(x = K, y = Mean.LnP.K.), fill = "red", size = 3,  shape = 21) +
geom_errorbar(aes(ymin = Mean.LnP.K. - Stdev.LnP.K.,
ymax = Mean.LnP.K. + Stdev.LnP.K.), width = 0.65) +
scale_x_continuous(breaks = seq(0,12, by = 2)) +
labs(y = "Mean Ln(probability)") +
theme_bw()
logKPlot = logKPlotA + theme(
axis.title.x = element_blank(),
axis.title.y = element_text(size = 14, color = "black"),
axis.text= element_text(size = 12, color = "black"),
axis.line = element_blank(),
panel.border = element_rect(size = 1)
)
logKPlot
# group plots
modelKPlots = (logKPlot | deltaKPlot)/(bicPlot|cvPlot) +
plot_layout(widths = c(20,1,20)) +
plot_annotation(caption = expression(paste("Genetic clusters (",italic(K),")")),
theme = theme(plot.caption = element_text(size = 14, hjust = 0.5))) +
plot_annotation(tag_level = "a") &
theme(plot.tag = element_text(size = 16, face = "bold"))
modelKPlots
ggsave("modelKPlots.tiff", width = 17, height = 16, units = "cm", dpi = 300)
ggsave("modelKPlots.eps", width = 17, height = 16, units = "cm", dpi = 300)
?theme
####----------------- STRUCTURE/ADMIXTURE Plots -----------------------------------------------------
### Microsats -------
msStructure = read.csv("sortedK2-microsat-structure.csv")
msStructure$Sample = factor(msStructure$Sample,
levels = msStructure$Sample[order(msStructure$Cluster2)])
msStrDat = melt(msStructure, id.vars = c("Sample", "Population"),
variable.name = "Ancestry", value.name = "Fraction")
col2 = c("blue", "turquoise")
names(col2) = levels(msStrDat$Ancestry)
msStructureA = ggplot(msStrDat, aes(x = Sample, y = Fraction, fill = Ancestry, order = Sample)) +
geom_bar(stat = "identity", position = "fill", width = 1, colour = "grey25") +
facet_grid(~fct_inorder(Population), scales = "free", switch = "x", space = "free") +
xlab("Population") +
scale_x_discrete(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0)) +
scale_fill_manual(values = col2) +
theme_bw()
msStructure = msStructureA + theme(
plot.title = element_text(hjust = 0.5),
panel.grid = element_blank(),
panel.background = element_rect(fill=NA, colour="black"),
panel.spacing.x = grid:::unit(0, "lines"),
panel.border = element_rect(fill = NA, color = "black", size = 2, linetype = "solid"),
axis.text.x = element_blank(),
axis.text.y = element_text(size = 12, color = "black"),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.ticks.x = element_blank(),
strip.background = element_blank(),
strip.text = element_text(size = 16, angle = 90, hjust = 1, vjust = 0.1),
legend.key = element_blank(),
legend.title = element_blank(),
legend.position = "none"
)
msStructure
msStructure = msStructureA + theme(
plot.title = element_text(hjust = 0.5),
panel.grid = element_blank(),
panel.background = element_rect(fill=NA, colour="black"),
panel.spacing.x = grid:::unit(0, "lines"),
panel.border = element_rect(fill = NA, color = "black", size = 2, linetype = "solid"),
axis.text.x = element_blank(),
axis.text.y = element_text(size = 12, color = "black"),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.ticks.x = element_blank(),
strip.background = element_rect(margin(1,1,0,1)),
strip.text = element_text(size = 16, angle = 90, hjust = 1, vjust = 0.1),
legend.key = element_blank(),
legend.title = element_blank(),
legend.position = "none"
)
msStructure
?theme
msStructure = msStructureA + theme(
plot.title = element_text(hjust = 0.5),
panel.grid = element_blank(),
panel.background = element_rect(fill=NA, colour="black"),
panel.spacing.x = grid:::unit(0, "lines"),
panel.border = element_rect(fill = NA, color = "black", size = 2, linetype = "solid"),
axis.text.x = element_blank(),
axis.text.y = element_text(size = 12, color = "black"),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.ticks.x = element_blank(),
strip.background = element_rect(fill = c("red", "blue")),
strip.text = element_text(size = 16, angle = 90, hjust = 1, vjust = 0.1),
legend.key = element_blank(),
legend.title = element_blank(),
legend.position = "none"
)
msStructure
msStructure = msStructureA + theme(
plot.title = element_text(hjust = 0.5),
panel.grid = element_blank(),
panel.background = element_rect(fill=NA, colour="black"),
panel.spacing.x = grid:::unit(0, "lines"),
panel.border = element_rect(fill = NA, color = "black", size = 2, linetype = "solid"),
axis.text.x = element_blank(),
axis.text.y = element_text(size = 12, color = "black"),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.ticks.x = element_blank(),
strip.background = element_rect(fill = c("red", "blue", "green")),
strip.text = element_text(size = 16, angle = 90, hjust = 1, vjust = 0.1),
legend.key = element_blank(),
legend.title = element_blank(),
legend.position = "none"
)
msStructure
msStructure = msStructureA + theme(
plot.title = element_text(hjust = 0.5),
panel.grid = element_blank(),
panel.background = element_rect(fill=NA, colour="black"),
panel.spacing.x = grid:::unit(0, "lines"),
panel.border = element_rect(fill = NA, color = "black", size = 2, linetype = "solid"),
axis.text.x = element_blank(),
axis.text.y = element_text(size = 12, color = "black"),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.ticks.x = element_blank(),
strip.background = element_blank(),
strip.text = element_text(size = 16, angle = 90, hjust = 1, vjust = 0.1),
legend.key = element_blank(),
legend.title = element_blank(),
legend.position = "none"
)
msStructure
pacman::p_load("adegenet", "dendextend", "ggdendro", "hierfstat", "Imap", "patchwork", "poppr",
"RColorBrewer", "reshape2", "StAMPP", "tidyverse", "vcfR", "vegan", "wesanderson", "WGCNA", "boa", "paletteer")
if (!require("pacman")) install.packages("pacman")
pacman::p_load("adegenet", "dendextend", "ggdendro", "hierfstat", "Imap", "patchwork", "poppr",
"RColorBrewer", "reshape2", "StAMPP", "tidyverse", "vcfR", "vegan", "wesanderson", "WGCNA", "boa", "paletteer")
install.packages("colorspace")
install.packages("colorspace")
library(colorspace)
####----------------- Zoox Plot ---------------------------------------------------------------------
dfZoox = read.csv("zoox-proportions.csv")
zDat = melt(dfZoox, id.vars = c("Sample", "Population"), variable.name = "Symbiont", value.name = "Fraction")
if (!require("pacman")) install.packages("pacman")
pacman::p_load("adegenet", "dendextend", "ggdendro", "hierfstat", "Imap", "patchwork", "poppr",
"RColorBrewer", "reshape2", "StAMPP", "tidyverse", "vcfR", "vegan", "paletteer", "WGCNA")
####----------------- Zoox Plot ---------------------------------------------------------------------
dfZoox = read.csv("zoox-proportions.csv")
zDat = melt(dfZoox, id.vars = c("Sample", "Population"), variable.name = "Symbiont", value.name = "Fraction")
#col3 = brewer.pal(4, "YlGnBu")
col3=hcl_palettes(palette = "green-brown")
names(col3) = levels(zDat$Symbiont)
zooxPlotA = ggplot(zDat, aes(x = Sample, y = Fraction, fill = Symbiont, order = Sample)) +
geom_bar(stat = "identity", position = "fill", width = 1, colour = "grey25") +
facet_grid(~fct_inorder(Population), scales = "free", switch = "x", space = "free") +
xlab("Population") +
scale_x_discrete(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0), labels = function(x) paste0(x*100, "%")) +
scale_fill_manual(values = col3, name = "Symbiodiniaceae genus") +
theme_bw()
zooxPlot = zooxPlotA + theme(
plot.title = element_blank(),
panel.grid = element_blank(),
panel.background = element_rect(fill = NA, colour = "grey25"),
panel.spacing.x = grid:::unit(0, "lines"),
panel.border = element_rect(fill = NA, color = "black", size = 2, linetype = "solid"),
axis.text.x=element_blank(),
axis.text.y=element_text(size = 12, color = "black"),
axis.title.x=element_text(size = 18),
axis.title.y = element_blank(),
axis.ticks.x=element_blank(),
strip.background=element_blank(),
strip.text=element_text(size = 16, angle = 90, hjust = 1, vjust = 0),
legend.text = element_text(face = "italic")
)
zooxPlot
col3
####----------------- Zoox Plot ---------------------------------------------------------------------
dfZoox = read.csv("zoox-proportions.csv")
zDat = melt(dfZoox, id.vars = c("Sample", "Population"), variable.name = "Symbiont", value.name = "Fraction")
col3 = brewer.pal(4, "BrBg")
####----------------- Zoox Plot ---------------------------------------------------------------------
dfZoox = read.csv("zoox-proportions.csv")
zDat = melt(dfZoox, id.vars = c("Sample", "Population"), variable.name = "Symbiont", value.name = "Fraction")
col3 = brewer.pal(4, "BrBG")
names(col3) = levels(zDat$Symbiont)
zooxPlotA = ggplot(zDat, aes(x = Sample, y = Fraction, fill = Symbiont, order = Sample)) +
geom_bar(stat = "identity", position = "fill", width = 1, colour = "grey25") +
facet_grid(~fct_inorder(Population), scales = "free", switch = "x", space = "free") +
xlab("Population") +
scale_x_discrete(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0), labels = function(x) paste0(x*100, "%")) +
scale_fill_manual(values = col3, name = "Symbiodiniaceae genus") +
theme_bw()
zooxPlot = zooxPlotA + theme(
plot.title = element_blank(),
panel.grid = element_blank(),
panel.background = element_rect(fill = NA, colour = "grey25"),
panel.spacing.x = grid:::unit(0, "lines"),
panel.border = element_rect(fill = NA, color = "black", size = 2, linetype = "solid"),
axis.text.x=element_blank(),
axis.text.y=element_text(size = 12, color = "black"),
axis.title.x=element_text(size = 18),
axis.title.y = element_blank(),
axis.ticks.x=element_blank(),
strip.background=element_blank(),
strip.text=element_text(size = 16, angle = 90, hjust = 1, vjust = 0),
legend.text = element_text(face = "italic")
)
zooxPlot
dfZoox = read.csv("zoox-proportions.csv")
zDat = melt(dfZoox, id.vars = c("Sample", "Population"), variable.name = "Symbiont", value.name = "Fraction")
col3 = brewer.pal(4, "BrBG")
names(col3) = levels(zDat$Symbiont)
zooxPlotA = ggplot(zDat, aes(x = Sample, y = Fraction, fill = Symbiont, order = Sample)) +
geom_bar(stat = "identity", position = "fill", width = 1, colour = "grey25") +
facet_grid(~fct_inorder(Population), scales = "free", switch = "x", space = "free") +
xlab("Population") +
scale_x_discrete(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0), labels = function(x) paste0(x*100, "%")) +
scale_fill_manual(values = col3, name = "Symbiodiniaceae genus") +
theme_bw()
zooxPlot = zooxPlotA + theme(
plot.title = element_blank(),
panel.grid = element_blank(),
panel.background = element_rect(fill = NA, colour = "grey25"),
panel.spacing.x = grid:::unit(0, "lines"),
panel.border = element_rect(fill = NA, color = "black", size = 2, linetype = "solid"),
axis.text.x=element_blank(),
axis.text.y=element_text(size = 12, color = "black"),
axis.title.x=element_text(size = 18),
axis.title.y = element_blank(),
axis.ticks.x=element_blank(),
strip.background=element_blank(),
strip.text=element_text(size = 16, angle = 90, hjust = 1, vjust = 0),
legend.text = element_text(face = "italic")
)
zooxPlot
ggsave("../figures/zooxplot.tiff", plot = zooxPlot, width = 34.35, height = 12.5, units = "cm", dpi = 300)
ggsave("../figures/zooxplot.eps", plot = zooxPlot, width = 34.35, height = 12.5, units = "cm", dpi = 300)
display.brewer.pal(7,"BrBG")
dfZoox = read.csv("zoox-proportions.csv")
zDat = melt(dfZoox, id.vars = c("Sample", "Population"), variable.name = "Symbiont", value.name = "Fraction")
col3 = brewer.pal(4, "BrBG")
names(col3) = levels(zDat$Symbiont)
zooxPlotA = ggplot(zDat, aes(x = Sample, y = Fraction, fill = Symbiont, order = Sample)) +
geom_bar(stat = "identity", position = "fill", width = 1, colour = "grey25") +
facet_grid(~fct_inorder(Population), scales = "free", switch = "x", space = "free") +
xlab("Population") +
scale_x_discrete(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0), labels = function(x) paste0(x*100, "%")) +
scale_fill_manual(values = col3, name = "Symbiodiniaceae genus") +
theme_bw()
zooxPlot = zooxPlotA + theme(
plot.title = element_blank(),
panel.grid = element_blank(),
panel.background = element_rect(fill = NA, colour = "grey25"),
panel.spacing.x = grid:::unit(0, "lines"),
panel.border = element_rect(fill = NA, color = "black", size = 2, linetype = "solid"),
axis.text.x=element_blank(),
axis.text.y=element_text(size = 12, color = "black"),
axis.title.x=element_text(size = 18),
axis.title.y = element_blank(),
axis.ticks.x=element_blank(),
strip.background=element_blank(),
strip.text=element_text(size = 16, angle = 90, hjust = 1, vjust = 0),
legend.text = element_text(face = "italic")
)
zooxPlot
ggsave("../figures/zooxplot.tiff", plot = zooxPlot, width = 34.35, height = 12.5, units = "cm", dpi = 300)
ggsave("../figures/zooxplot.eps", plot = zooxPlot, width = 34.35, height = 12.5, units = "cm", dpi = 300)
dfZoox = read.csv("zoox-proportions.csv")
zDat = melt(dfZoox, id.vars = c("Sample", "Population"), variable.name = "Symbiont", value.name = "Fraction")
col3 = brewer.pal(4, "BrBG")
names(col3) = levels(zDat$Symbiont)
zooxPlotA = ggplot(zDat, aes(x = Sample, y = Fraction, fill = Symbiont, order = Sample)) +
geom_bar(stat = "identity", position = "fill", width = 1, colour = "grey25") +
facet_grid(~fct_inorder(Population), scales = "free", switch = "x", space = "free") +
xlab("Population") +
scale_x_discrete(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0), labels = function(x) paste0(x*100, "%")) +
scale_fill_manual(values = col3, name = "Symbiodiniaceae genus") +
theme_bw()
zooxPlot = zooxPlotA + theme(
plot.title = element_blank(),
panel.grid = element_blank(),
panel.background = element_rect(fill = NA, colour = "grey25"),
panel.spacing.x = grid:::unit(0, "lines"),
panel.border = element_rect(fill = NA, color = "black", size = 2, linetype = "solid"),
axis.text.x=element_blank(),
axis.text.y=element_text(size = 12, color = "black"),
axis.title.x=element_text(size = 18),
axis.title.y = element_blank(),
axis.ticks.x=element_blank(),
strip.background=element_blank(),
strip.text=element_text(size = 16, angle = 90, hjust = 1, vjust = 0),
legend.text = element_text(face = "italic")
)
zooxPlot
ggsave("../figures/zooxplot.tiff", plot = zooxPlot, width = 34.35, height = 12.5, units = "cm", dpi = 300)
ggsave("../figures/zooxplot.eps", plot = zooxPlot, width = 34.35, height = 12.5, units = "cm", dpi = 300)
cubaVcf = read.vcfR("trimmed_mc_renamed.vcf.gz")
cubaGenlight = vcfR2genlight(cubaVcf, n.cores = 2)
locNames(cubaGenlight) = paste(cubaVcf@fix[,1],cubaVcf@fix[,2],sep="_")
popData = read.table("vcf_popmap")
popData$depth = factor("Shallow", levels = c("Shallow", "Mesophotic"))
popData$depth[c(1:2)] = "Mesophotic"
levels(popData$depth)
colnames(popData) = c("sample","population", "depth")
levels(popData$population) = c("Banco de San Antonio", "Cabo Lucrecia", "Cayo Anclitas", "Cayo Jutias",
"Cayo Sabinal", "Chivirico", "Guanahacabibes", "Isla de la Juventud" )
strata(cubaGenlight) = data.frame(popData)
setPop(cubaGenlight) = ~population
cubaGenlight
amova <- poppr.amova(cubaGenlight, ~population)
amova
set.seed(1999)
amovasignif   <- randtest(amova, nrepet = 999)
amovasignif
source('plot_R.r')
source('plot_R.r')
lociFST=read.table("trimmed_mc.baye_fst.txt",header=T)
head(lociFST)
outs=which(lociFST[,"qval"]<0.1)
plot_bayescan("mc_noclones.baye_fst.txt",FDR=0.1,add_text=F,size=0.5,highlight=outs)
plot_bayescan("trimmed_mc.baye_fst.txt",FDR=0.1,add_text=F,size=0.5,highlight=outs)
