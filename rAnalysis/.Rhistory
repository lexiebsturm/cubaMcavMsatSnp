)
evannoPlots = (logKPlot | plot_spacer() |deltaKPlot) +
plot_layout(widths = c(20,1,20)) +
plot_annotation(caption = expression(paste("Genetic clusters (",italic(K),")")),
theme = theme(plot.caption = element_text(size = 14, hjust = 0.5))) +
plot_annotation(tag_level = "a") &
theme(plot.tag = element_text(size = 16, face = "bold"))
evannoPlots
deltaKPlot = deltaKPlotA + theme(
axis.title.x = element_blank(),
axis.title.y = element_text(size = 14, color = "black"),
axis.text= element_text(size = 12, color = "black"),
axis.line = element_blank(),
panel.border = element_rect(size = 1)
)
evannoPlots = (logKPlot | plot_spacer() |deltaKPlot) +
plot_layout(widths = c(20,1,20)) +
plot_annotation(caption = expression(paste("Genetic clusters (",italic(K),")")),
theme = theme(plot.caption = element_text(size = 14, hjust = 0.5))) +
plot_annotation(tag_level = "a") &
theme(plot.tag = element_text(size = 16, face = "bold"))
evannoPlots
logKPlot = logKPlotA + theme(
axis.title.x = element_blank(),
axis.title.y = element_text(size = 14, color = "black"),
axis.text= element_text(size = 12, color = "black"),
axis.line = element_blank(),
panel.border = element_rect(size = 1)
)
# deltaK plot
deltaKPlotA = ggplot(strctrHrvstr, aes(x = K, y = Delta.K), color = "black") +
geom_path(size = 1, aes(x = K)) +
geom_point(size = 3) +
scale_x_continuous(breaks = seq(0,12, by = 2)) +
labs(y = expression(paste(Delta, italic("K")))) +
theme_bw()
deltaKPlot = deltaKPlotA + theme(
axis.title.x = element_blank(),
axis.title.y = element_text(size = 14, color = "black"),
axis.text= element_text(size = 12, color = "black"),
axis.line = element_blank(),
panel.border = element_rect(size = 1)
)
evannoPlots = (logKPlot | plot_spacer() |deltaKPlot) +
plot_layout(widths = c(20,1,20)) +
plot_annotation(caption = expression(paste("Genetic clusters (",italic(K),")")),
theme = theme(plot.caption = element_text(size = 14, hjust = 0.5))) +
plot_annotation(tag_level = "a") &
theme(plot.tag = element_text(size = 16, face = "bold"))
evannoPlots
snpBIC = read.csv("BIC_Values.csv", header = TRUE)
head(snpBIC)
bicPlotA = ggplot(snpBIC, aes(x = Number.of.Clusters..K., y = BIC), color = "black") +
geom_point(size = 3) +
geom_path(size = 1) +
scale_x_continuous(breaks = seq(0,12, by = 2)) +
labs(y = "BIC") +
theme_bw()
bicPlot = bicPlotA + theme(
axis.title.x = element_blank(),
axis.title.y = element_text(size = 14, color = "black"),
axis.text= element_text(size = 12, color = "black"),
axis.line = element_blank(),
panel.border = element_rect(size = 1)
)
bicPlot
cvAdmix = read.csv("CV_Values_ADMIXTURE.csv", header =TRUE)
cvAdmix
# Admiture cross validation
cvAdmix = read.csv("CV_Values_ADMIXTURE.csv", header =TRUE)
cvPlotA = ggplot(cvAdmix, aes(x = Number.of.clusters, y = Model.Cross.Validation.Values), color = "black") +
geom_point(size = 3) +
geom_path(size = 1) +
scale_x_continuous(breaks = seq(0,12, by = 2)) +
labs(y = "Model cross validation") +
theme_bw()
cvPlot = cvPlotA + theme(
axis.title.x = element_blank(),
axis.title.y = element_text(size = 14, color = "black"),
axis.text= element_text(size = 12, color = "black"),
axis.line = element_blank(),
panel.border = element_rect(size = 1)
)
cvPlot
evannoPlots = (logKPlot | deltaKPlot)/(bicPlot|cvPlot) +
plot_layout(widths = c(20,1,20)) +
plot_annotation(caption = expression(paste("Genetic clusters (",italic(K),")")),
theme = theme(plot.caption = element_text(size = 14, hjust = 0.5))) +
plot_annotation(tag_level = "a") &
theme(plot.tag = element_text(size = 16, face = "bold"))
evannoPlots
head(strctrHrvstr)
bestStr = strctrHrvstr[,1]
bestStr
bestStr = strctrHrvstr[,strctrHrvstr$1]
bestStr = strctrHrvstr[,strctrHrvstr[,1]]
bestStr = strctrHrvstr[,1]
bestStr
bestStr = strctrHrvstr[,2]
bestStr
bestStr = strctrHrvstr[1,]
bestStr
# log probability of K plot
logKPlotA = ggplot(strctrHrvstr, aes(x = K, y = Mean.LnP.K.)) +
geom_point(color = "black", fill = "gray60", size =3) +
geom_point(bestStr, aes(x = K, y = Mean.LnP.K.),color = "red", size = 3)
# log probability of K plot
logKPlotA = ggplot(strctrHrvstr, aes(x = K, y = Mean.LnP.K.)) +
geom_point(color = "black", fill = "gray60", size =3) +
geom_point(bestStr, aes(x = K, y = Mean.LnP.K.), color = "red", size = 3) +
geom_errorbar(aes(ymin = Mean.LnP.K. - Stdev.LnP.K.,
ymax = Mean.LnP.K. + Stdev.LnP.K.), width = 0.1) +
scale_x_continuous(breaks = seq(0,12, by = 2)) +
labs(y = "Mean Ln(probability)") +
theme_bw()
# log probability of K plot
logKPlotA = ggplot(strctrHrvstr, aes(x = K, y = Mean.LnP.K.)) +
geom_point(color = "black", fill = "gray60", size =3) +
geom_point(data = bestStr, aes(x = K, y = Mean.LnP.K.), color = "red", size = 3) +
geom_errorbar(aes(ymin = Mean.LnP.K. - Stdev.LnP.K.,
ymax = Mean.LnP.K. + Stdev.LnP.K.), width = 0.1) +
scale_x_continuous(breaks = seq(0,12, by = 2)) +
labs(y = "Mean Ln(probability)") +
theme_bw()
logKPlot = logKPlotA + theme(
axis.title.x = element_blank(),
axis.title.y = element_text(size = 14, color = "black"),
axis.text= element_text(size = 12, color = "black"),
axis.line = element_blank(),
panel.border = element_rect(size = 1)
)
logKPlot
# log probability of K plot
logKPlotA = ggplot(strctrHrvstr, aes(x = K, y = Mean.LnP.K.)) +
geom_point(color = "black", fill = "gray60", size = 3, shape = 21) +
geom_point(data = bestStr, aes(x = K, y = Mean.LnP.K.), color = "red", size = 3) +
geom_errorbar(aes(ymin = Mean.LnP.K. - Stdev.LnP.K.,
ymax = Mean.LnP.K. + Stdev.LnP.K.), width = 0.1) +
scale_x_continuous(breaks = seq(0,12, by = 2)) +
labs(y = "Mean Ln(probability)") +
theme_bw()
logKPlot = logKPlotA + theme(
axis.title.x = element_blank(),
axis.title.y = element_text(size = 14, color = "black"),
axis.text= element_text(size = 12, color = "black"),
axis.line = element_blank(),
panel.border = element_rect(size = 1)
)
logKPlot
# log probability of K plot
logKPlotA = ggplot(strctrHrvstr, aes(x = K, y = Mean.LnP.K.)) +
geom_point(color = "black", size = 3) +
geom_point(data = bestStr, aes(x = K, y = Mean.LnP.K.), color = "red", size = 3,  shape = 21) +
geom_errorbar(aes(ymin = Mean.LnP.K. - Stdev.LnP.K.,
ymax = Mean.LnP.K. + Stdev.LnP.K.), width = 0.1) +
scale_x_continuous(breaks = seq(0,12, by = 2)) +
labs(y = "Mean Ln(probability)") +
theme_bw()
logKPlot = logKPlotA + theme(
axis.title.x = element_blank(),
axis.title.y = element_text(size = 14, color = "black"),
axis.text= element_text(size = 12, color = "black"),
axis.line = element_blank(),
panel.border = element_rect(size = 1)
)
logKPlot
# log probability of K plot
logKPlotA = ggplot(strctrHrvstr, aes(x = K, y = Mean.LnP.K.)) +
geom_point(color = "black", size = 3) +
geom_point(data = bestStr, aes(x = K, y = Mean.LnP.K.), fill = "red", size = 3,  shape = 21) +
geom_errorbar(aes(ymin = Mean.LnP.K. - Stdev.LnP.K.,
ymax = Mean.LnP.K. + Stdev.LnP.K.), width = 0.1) +
scale_x_continuous(breaks = seq(0,12, by = 2)) +
labs(y = "Mean Ln(probability)") +
theme_bw()
logKPlot = logKPlotA + theme(
axis.title.x = element_blank(),
axis.title.y = element_text(size = 14, color = "black"),
axis.text= element_text(size = 12, color = "black"),
axis.line = element_blank(),
panel.border = element_rect(size = 1)
)
logKPlot
# deltaK plot
bestDK = strctrHrvstr[2,]
deltaKPlotA = ggplot(strctrHrvstr, aes(x = K, y = Delta.K), color = "black") +
geom_path(size = 1, aes(x = K)) +
geom_point(size = 3) +
geom_point(data = bestDK, aes(x = K, y = DeltaK.), fill = "red", size = 3,  shape = 21) +
scale_x_continuous(breaks = seq(0,12, by = 2)) +
labs(y = expression(paste(Delta, italic("K")))) +
theme_bw()
deltaKPlot = deltaKPlotA + theme(
axis.title.x = element_blank(),
axis.title.y = element_text(size = 14, color = "black"),
axis.text= element_text(size = 12, color = "black"),
axis.line = element_blank(),
panel.border = element_rect(size = 1)
)
deltaKPlot
deltaKPlotA = ggplot(strctrHrvstr, aes(x = K, y = Delta.K), color = "black") +
geom_path(size = 1, aes(x = K)) +
geom_point(size = 3) +
geom_point(data = bestDK, aes(x = K, y = Delta.K.), fill = "red", size = 3,  shape = 21) +
scale_x_continuous(breaks = seq(0,12, by = 2)) +
labs(y = expression(paste(Delta, italic("K")))) +
theme_bw()
deltaKPlot = deltaKPlotA + theme(
axis.title.x = element_blank(),
axis.title.y = element_text(size = 14, color = "black"),
axis.text= element_text(size = 12, color = "black"),
axis.line = element_blank(),
panel.border = element_rect(size = 1)
)
deltaKPlot
bestDK
deltaKPlotA = ggplot(strctrHrvstr, aes(x = K, y = Delta.K), color = "black") +
geom_path(size = 1, aes(x = K)) +
geom_point(size = 3) +
geom_point(data = bestDK, aes(x = K, y = Delta.K), fill = "red", size = 3,  shape = 21) +
scale_x_continuous(breaks = seq(0,12, by = 2)) +
labs(y = expression(paste(Delta, italic("K")))) +
theme_bw()
deltaKPlot = deltaKPlotA + theme(
axis.title.x = element_blank(),
axis.title.y = element_text(size = 14, color = "black"),
axis.text= element_text(size = 12, color = "black"),
axis.line = element_blank(),
panel.border = element_rect(size = 1)
)
deltaKPlot
head(snpBIC)
bestBIC = snpBIC[2,]
bicPlotA = ggplot(snpBIC, aes(x = Number.of.Clusters..K., y = BIC), color = "black") +
geom_point(size = 3) +
geom_path(size = 1) +
geom_point(data = bestBIC, aes(x = Number.of.Clusters..K., y = BIC), fill = "red", size = 3,  shape = 21) +
scale_x_continuous(breaks = seq(0,12, by = 2)) +
labs(y = "BIC") +
theme_bw()
bicPlot = bicPlotA + theme(
axis.title.x = element_blank(),
axis.title.y = element_text(size = 14, color = "black"),
axis.text= element_text(size = 12, color = "black"),
axis.line = element_blank(),
panel.border = element_rect(size = 1)
)
bicPlot
bestCV = cvAdmix[1,]
cvAdmix
cvPlotA = ggplot(cvAdmix, aes(x = Number.of.clusters, y = Model.Cross.Validation.Values), color = "black") +
geom_point(size = 3) +
geom_path(size = 1) +
geom_point(data = bestCV, aes(x = Number.of.clusters, y = Model.Cross.Validation.Values), fill = "red", size = 3,  shape = 21) +
scale_x_continuous(breaks = seq(0,12, by = 2)) +
labs(y = "Model cross validation") +
theme_bw()
cvPlot = cvPlotA + theme(
axis.title.x = element_blank(),
axis.title.y = element_text(size = 14, color = "black"),
axis.text= element_text(size = 12, color = "black"),
axis.line = element_blank(),
panel.border = element_rect(size = 1)
)
cvPlot
evannoPlots = (logKPlot | deltaKPlot)/(bicPlot|cvPlot) +
plot_layout(widths = c(20,1,20)) +
plot_annotation(caption = expression(paste("Genetic clusters (",italic(K),")")),
theme = theme(plot.caption = element_text(size = 14, hjust = 0.5))) +
plot_annotation(tag_level = "a") &
theme(plot.tag = element_text(size = 16, face = "bold"))
evannoPlots
modelKPlots = (logKPlot | deltaKPlot)/(bicPlot|cvPlot) +
plot_layout(widths = c(20,1,20)) +
plot_annotation(caption = expression(paste("Genetic clusters (",italic(K),")")),
theme = theme(plot.caption = element_text(size = 14, hjust = 0.5))) +
plot_annotation(tag_level = "a") &
theme(plot.tag = element_text(size = 16, face = "bold"))
modelKPlots
ggsave("modelKPlots.tiff", width = 20, height = 20, units = "cm", dpi = 300)
ggsave("modelKPlots.tiff", width = 15, height = 12, units = "cm", dpi = 300)
ggsave("modelKPlots.tiff", width = 15, height = 14, units = "cm", dpi = 300)
# log probability of K plot
logKPlotA = ggplot(strctrHrvstr, aes(x = K, y = Mean.LnP.K.)) +
geom_point(color = "black", size = 3) +
geom_point(data = bestStr, aes(x = K, y = Mean.LnP.K.), fill = "red", size = 3,  shape = 21) +
geom_errorbar(aes(ymin = Mean.LnP.K. - Stdev.LnP.K.,
ymax = Mean.LnP.K. + Stdev.LnP.K.), width = 0.4) +
scale_x_continuous(breaks = seq(0,12, by = 2)) +
labs(y = "Mean Ln(probability)") +
theme_bw()
logKPlot = logKPlotA + theme(
axis.title.x = element_blank(),
axis.title.y = element_text(size = 14, color = "black"),
axis.text= element_text(size = 12, color = "black"),
axis.line = element_blank(),
panel.border = element_rect(size = 1)
)
# group plots
modelKPlots = (logKPlot | deltaKPlot)/(bicPlot|cvPlot) +
plot_layout(widths = c(20,1,20)) +
plot_annotation(caption = expression(paste("Genetic clusters (",italic(K),")")),
theme = theme(plot.caption = element_text(size = 14, hjust = 0.5))) +
plot_annotation(tag_level = "a") &
theme(plot.tag = element_text(size = 16, face = "bold"))
modelKPlots
ggsave("modelKPlots.tiff", width = 17, height = 16, units = "cm", dpi = 300)
# log probability of K plot
logKPlotA = ggplot(strctrHrvstr, aes(x = K, y = Mean.LnP.K.)) +
geom_point(color = "black", size = 3) +
geom_point(data = bestStr, aes(x = K, y = Mean.LnP.K.), fill = "red", size = 3,  shape = 21) +
geom_errorbar(aes(ymin = Mean.LnP.K. - Stdev.LnP.K.,
ymax = Mean.LnP.K. + Stdev.LnP.K.), width = 0.6) +
scale_x_continuous(breaks = seq(0,12, by = 2)) +
labs(y = "Mean Ln(probability)") +
theme_bw()
logKPlot = logKPlotA + theme(
axis.title.x = element_blank(),
axis.title.y = element_text(size = 14, color = "black"),
axis.text= element_text(size = 12, color = "black"),
axis.line = element_blank(),
panel.border = element_rect(size = 1)
)
# group plots
modelKPlots = (logKPlot | deltaKPlot)/(bicPlot|cvPlot) +
plot_layout(widths = c(20,1,20)) +
plot_annotation(caption = expression(paste("Genetic clusters (",italic(K),")")),
theme = theme(plot.caption = element_text(size = 14, hjust = 0.5))) +
plot_annotation(tag_level = "a") &
theme(plot.tag = element_text(size = 16, face = "bold"))
modelKPlots
ggsave("modelKPlots.tiff", width = 17, height = 16, units = "cm", dpi = 300)
head(strctrHrvstr)
# log probability of K plot
logKPlotA = ggplot(strctrHrvstr, aes(x = K, y = Mean.LnP.K.)) +
geom_point(color = "black", size = 3) +
geom_point(data = bestStr, aes(x = K, y = Mean.LnP.K.), fill = "red", size = 3,  shape = 21) +
geom_errorbar(aes(ymin = Mean.LnP.K. - Stdev.LnP.K.,
ymax = Mean.LnP.K. + Stdev.LnP.K.), width = 0.65) +
scale_x_continuous(breaks = seq(0,12, by = 2)) +
labs(y = "Mean Ln(probability)") +
theme_bw()
logKPlot = logKPlotA + theme(
axis.title.x = element_blank(),
axis.title.y = element_text(size = 14, color = "black"),
axis.text= element_text(size = 12, color = "black"),
axis.line = element_blank(),
panel.border = element_rect(size = 1)
)
logKPlot
# group plots
modelKPlots = (logKPlot | deltaKPlot)/(bicPlot|cvPlot) +
plot_layout(widths = c(20,1,20)) +
plot_annotation(caption = expression(paste("Genetic clusters (",italic(K),")")),
theme = theme(plot.caption = element_text(size = 14, hjust = 0.5))) +
plot_annotation(tag_level = "a") &
theme(plot.tag = element_text(size = 16, face = "bold"))
modelKPlots
ggsave("modelKPlots.tiff", width = 17, height = 16, units = "cm", dpi = 300)
ggsave("modelKPlots.eps", width = 17, height = 16, units = "cm", dpi = 300)
?theme
####----------------- STRUCTURE/ADMIXTURE Plots -----------------------------------------------------
### Microsats -------
msStructure = read.csv("sortedK2-microsat-structure.csv")
msStructure$Sample = factor(msStructure$Sample,
levels = msStructure$Sample[order(msStructure$Cluster2)])
msStrDat = melt(msStructure, id.vars = c("Sample", "Population"),
variable.name = "Ancestry", value.name = "Fraction")
col2 = c("blue", "turquoise")
names(col2) = levels(msStrDat$Ancestry)
msStructureA = ggplot(msStrDat, aes(x = Sample, y = Fraction, fill = Ancestry, order = Sample)) +
geom_bar(stat = "identity", position = "fill", width = 1, colour = "grey25") +
facet_grid(~fct_inorder(Population), scales = "free", switch = "x", space = "free") +
xlab("Population") +
scale_x_discrete(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0)) +
scale_fill_manual(values = col2) +
theme_bw()
msStructure = msStructureA + theme(
plot.title = element_text(hjust = 0.5),
panel.grid = element_blank(),
panel.background = element_rect(fill=NA, colour="black"),
panel.spacing.x = grid:::unit(0, "lines"),
panel.border = element_rect(fill = NA, color = "black", size = 2, linetype = "solid"),
axis.text.x = element_blank(),
axis.text.y = element_text(size = 12, color = "black"),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.ticks.x = element_blank(),
strip.background = element_blank(),
strip.text = element_text(size = 16, angle = 90, hjust = 1, vjust = 0.1),
legend.key = element_blank(),
legend.title = element_blank(),
legend.position = "none"
)
msStructure
msStructure = msStructureA + theme(
plot.title = element_text(hjust = 0.5),
panel.grid = element_blank(),
panel.background = element_rect(fill=NA, colour="black"),
panel.spacing.x = grid:::unit(0, "lines"),
panel.border = element_rect(fill = NA, color = "black", size = 2, linetype = "solid"),
axis.text.x = element_blank(),
axis.text.y = element_text(size = 12, color = "black"),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.ticks.x = element_blank(),
strip.background = element_rect(margin(1,1,0,1)),
strip.text = element_text(size = 16, angle = 90, hjust = 1, vjust = 0.1),
legend.key = element_blank(),
legend.title = element_blank(),
legend.position = "none"
)
msStructure
?theme
msStructure = msStructureA + theme(
plot.title = element_text(hjust = 0.5),
panel.grid = element_blank(),
panel.background = element_rect(fill=NA, colour="black"),
panel.spacing.x = grid:::unit(0, "lines"),
panel.border = element_rect(fill = NA, color = "black", size = 2, linetype = "solid"),
axis.text.x = element_blank(),
axis.text.y = element_text(size = 12, color = "black"),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.ticks.x = element_blank(),
strip.background = element_rect(fill = c("red", "blue")),
strip.text = element_text(size = 16, angle = 90, hjust = 1, vjust = 0.1),
legend.key = element_blank(),
legend.title = element_blank(),
legend.position = "none"
)
msStructure
msStructure = msStructureA + theme(
plot.title = element_text(hjust = 0.5),
panel.grid = element_blank(),
panel.background = element_rect(fill=NA, colour="black"),
panel.spacing.x = grid:::unit(0, "lines"),
panel.border = element_rect(fill = NA, color = "black", size = 2, linetype = "solid"),
axis.text.x = element_blank(),
axis.text.y = element_text(size = 12, color = "black"),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.ticks.x = element_blank(),
strip.background = element_rect(fill = c("red", "blue", "green")),
strip.text = element_text(size = 16, angle = 90, hjust = 1, vjust = 0.1),
legend.key = element_blank(),
legend.title = element_blank(),
legend.position = "none"
)
msStructure
msStructure = msStructureA + theme(
plot.title = element_text(hjust = 0.5),
panel.grid = element_blank(),
panel.background = element_rect(fill=NA, colour="black"),
panel.spacing.x = grid:::unit(0, "lines"),
panel.border = element_rect(fill = NA, color = "black", size = 2, linetype = "solid"),
axis.text.x = element_blank(),
axis.text.y = element_text(size = 12, color = "black"),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.ticks.x = element_blank(),
strip.background = element_blank(),
strip.text = element_text(size = 16, angle = 90, hjust = 1, vjust = 0.1),
legend.key = element_blank(),
legend.title = element_blank(),
legend.position = "none"
)
msStructure
setwd("~/Documents/GitHub/cubaMcavMsatSnp/rAnalysis/")
if (!require("pacman")) install.packages("pacman")
pacman::p_load("adegenet", "dendextend", "ggdendro", "hierfstat", "Imap", "patchwork", "poppr",
"RColorBrewer", "reshape2", "StAMPP", "tidyverse", "vcfR", "vegan", "wesanderson", "WGCNA")
####----------- SNPs IBS Dendrogram To Identify Clones-----------------------------------------------
cloneBams = read.table("sample_list")[,1] # list of bam files
cloneMa = as.matrix(read.table("trimmed_mc_w_clones.ibsMat"))
dimnames(cloneMa) = list(cloneBams,cloneBams)
clonesHc = hclust(as.dist(cloneMa),"ave")
cloneMeta = read.table("clonePops.txt", sep="\t")
clonePops = cloneMeta$V2
cloneDend = as.dendrogram(hclust(as.dist(cloneMa),"ave"))
dendPops = labels2colors(as.numeric(as.factor(as.numeric(clonePops))),
colorSeq = brewer.pal(8, "Dark2"))[order.dendrogram(cloneDend)]
#dev.off()
#dev.new()
####----------- Heterozygosity Plot -----------------------------------------------------------------
cubaHetero = read.csv("Heterozygosity_Values.csv", header = TRUE)
hetPlotA = ggplot(cubaHetero, aes(x = Analysis.Type, y = Heterozygosity, fill = Population,
alpha = Type)) +
geom_bar(position = position_dodge(), stat = "identity", color = 'black') +
scale_y_continuous(expand = c(0, 0)) +
geom_errorbar(aes(ymin = Heterozygosity-Error, ymax = Heterozygosity+Error),
width = 0.6, position = position_dodge(0.9)) +
scale_fill_brewer(palette = "Dark2") +
scale_alpha_manual(values = c(1, 0.75), name = "Heterozygosity") +
labs(x ="Analysis Type", y = "Heterozygosity") +
guides(fill = guide_legend(order = 1)) +
theme_classic()
hetPlot = hetPlotA + theme(panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(color = "black"),
axis.text = element_text(size = 14, color = "black"),
axis.title.y = element_text(size = 14),
legend.title = element_text(size = 14),
legend.text = element_text(size = 14),
axis.title.x = element_blank())
hetPlot
ggsave("../figures/heterozygosity_plot.tiff", plot = hetPlot, width = 25, height = 15, units = "cm", dpi = 300)
ggsave("../figures/heterozygosity_plot.eps", plot = hetPlot, width = 25, height = 15, units = "cm", dpi = 300)
ggsave("../figures/heterozygosity_plot.tiff", plot = hetPlot, width = 25, height = 15, units = "cm", dpi = 300)
ggsave("../figures/heterozygosity_plot.tiff", plot = hetPlot, width = 25, height = 15, units = "cm", dpi = 300)
